<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>int ch = getchar()?</title>
    <link href="/2020/06/01/int-ch-getchar/"/>
    <url>/2020/06/01/int-ch-getchar/</url>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>也许你看过/写过类似这样的代码：</p><pre><code class="hljs c"><span class="hljs-keyword">char</span> ch;<span class="hljs-keyword">while</span> ((ch = getchar()) != EOF)    <span class="hljs-built_in">putchar</span>(ch);</code></pre><p>这段代码看起来没什么问题，但实际上代码中的循环有可能永不终止，也有可能提前结束。</p><h1 id="函数与EOF介绍"><a href="#函数与EOF介绍" class="headerlink" title="函数与EOF介绍"></a>函数与EOF介绍</h1><p>在解释之前，我们先了解下相关内容。C语言常用的字符读取函数如下：</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getchar</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getc</span><span class="hljs-params">(FILE *stream)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fgetc</span><span class="hljs-params">(FILE *stream)</span></span>;</code></pre><p>这三个函数都是从文件流中读取一个字符，正常情况下把该字符从<code>unsigned char</code>转换为<code>int</code>类型返回，若出错或读到文件结尾则返回<code>EOF</code>。</p><p><code>EOF</code>又是什么呢？<code>EOF</code>只是一个宏定义的负整数而已，一般为<code>-1</code>(hex:0xffffffff)。</p><p>由于上述函数区别不大，此文便只用最常见的<code>getchar</code>函数来讨论。</p><h1 id="char-ch-getchar-错在哪里？"><a href="#char-ch-getchar-错在哪里？" class="headerlink" title="char ch = getchar()错在哪里？"></a>char ch = getchar()错在哪里？</h1><p>看到这，你可能会说：既然<code>EOF</code>只是值为<code>-1</code>的负整数，这不是在<code>char</code>的表示范围-128~127内吗？用<code>char</code>保存返回值有何不可？</p><p><code>-1</code>真的一定在<code>char</code>的表示范围内吗？我们可以在头文件<code>limits.h</code>中看到如下定义：</p><pre><code class="hljs c"><span class="hljs-comment">/* Minimum and maximum values a `signed char' can hold.  */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SCHAR_MIN(-128)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SCHAR_MAX127</span><span class="hljs-comment">/* Maximum value an `unsigned char' can hold.  (Minimum is 0.)  */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UCHAR_MAX255</span><span class="hljs-comment">/* Minimum and maximum values a `char' can hold.  */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __CHAR_UNSIGNED__</span>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CHAR_MIN0</span>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CHAR_MAXUCHAR_MAX</span><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CHAR_MINSCHAR_MIN</span>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CHAR_MAXSCHAR_MAX</span><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></code></pre><p>由此可见，标准并未规定<code>char</code>是有符号的，而是留给各个编译器自己实现。</p><p>所以当<code>char</code>默认为无符号时，<code>-1</code>就不在其表示范围内，这时使用<code>char</code>保存返回值也就有问题了。实际上即使你所用的编译器默认定义<code>char</code>是有符号的，文章开头的那段代码依然有潜在的bug。下面我们分为<code>char</code>默认无符号和有符号两种情况讨论，利用计算机组成原理的知识来详细解释为什么不应该用<code>char</code>保存<code>getchar</code>的返回值。</p><h2 id="1-char默认是无符号的"><a href="#1-char默认是无符号的" class="headerlink" title="1. char默认是无符号的"></a>1. char默认是无符号的</h2><p><strong>这种情况会导致循环无法终止。</strong>假定我们遇到错误/读到文件末尾，<code>getchar</code>函数返回<code>EOF</code>，这时由于<code>ch</code>是<code>char</code>类型，只有一个字节，而<code>EOF</code>是<code>int</code>类型，有四个字节却要保存在一个字节中，<code>EOF</code>的值会被截断，<code>ch</code>也就等于<code>0xff</code>，又因为<code>ch</code>要与<code>EOF</code>比较，<code>ch</code>符号扩展得<code>0x000000ff</code>（因为<code>ch</code>是无符号的，也就是0扩展），永远不可能等于<code>EOF</code>，循环也就永远不会终止。</p><h2 id="2-char默认是有符号的"><a href="#2-char默认是有符号的" class="headerlink" title="2. char默认是有符号的"></a>2. char默认是有符号的</h2><p><strong>这种情况可能导致循环提前终止。</strong>同样假定我们遇到错误/读到文件末尾，<code>getchar</code>函数返回<code>EOF</code>，前面都一样，但是在符号扩展的时候，由于<code>ch</code>是有符号的，其扩展得<code>0xffffffff</code>，等于<code>EOF</code>。因此循环是可以终止的，但是如果我们在遇到错误/读到文件末尾之前读到了一个值为<code>0xff</code>的字节，循环就会同碰到<code>EOF</code>一样终止。</p><h1 id="正确的代码"><a href="#正确的代码" class="headerlink" title="正确的代码"></a>正确的代码</h1><p>那么如何修改代码才是正确的呢？其实只需要用<code>int</code>来保存返回值即可。</p><pre><code class="hljs c"><span class="hljs-keyword">int</span> ch;<span class="hljs-keyword">while</span> ((ch = getchar()) != EOF)    <span class="hljs-built_in">putchar</span>(ch);</code></pre><p>这种情况就不会有问题。即使我们在遇到错误/读到文件末尾之前读到了一个值为<code>0xff</code>的字节，由于<code>ch</code>是<code>int</code>类型，而<code>getchar</code>是将读到的字符由<code>unsigned char</code>转为<code>int</code>作返回值，则该字节的值经符号扩展再赋值给<code>ch</code>，<code>ch</code>就等于<code>0x000000ff</code>，不会等于<code>EOF</code>，也就不会提前终止了。</p><p>综上，这就是为什么要用<code>int</code>类型而不是<code>char</code>类型来保存C语言字符读取函数的返回值。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://stackoverflow.com/questions/2054939/is-char-signed-or-unsigned-by-default" target="_blank" rel="noopener">论坛：char是有符号还是无符号？</a></li><li><a href="https://stackoverflow.com/questions/13694394/while-c-getcfile-eof-loop-wont-stop-executing" target="_blank" rel="noopener">论坛：为什么循环不会停止运行</a></li><li><a href="https://faq.cprogramming.com/cgi-bin/smartfaq.cgi?id=1043284351&answer=1048865140" target="_blank" rel="noopener">EOF的定义以及如何有效使用它</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>知识栏目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
